[🔍 Search Page: 검색 결과 페이지 구성 요약]

✅ 1. 기본 설정 및 상태 관리
- URL 파라미터에서 검색어(`q`) 추출: useSearchParams 사용
- 상태 관리: 검색 결과(`results`), 로딩/에러 상태, 필터(`filters`), 검색 시간 등 → useSearch 훅 사용
- 모달 관련 상태: selectedResult, showModal

✅ 2. 주요 이벤트 처리 로직
- [쿼리 변경 시] useEffect로 검색 실행: query가 변경되면 search(query)
- [검색 실행] handleSearch → 새로운 검색어로 페이지 이동 (`router.push`)
- [필터 적용] handleFiltersChange → 현재 query와 필터 함께 검색
- [검색 상세 클릭] handleDetailClick → 모달 열기 및 해당 result 저장

✅ 3. 전체 렌더링 구조
└ ErrorBoundary로 감싸 에러 발생 시 안전하게 처리

📌 헤더(Header)
- Navigation 컴포넌트 (상단 고정 메뉴)
- GoogleStyleSearch: 검색창 (초기 query 포함, 제안어 비활성화)

📌 메인 콘텐츠(Main)
└ flex 레이아웃 구성: 왼쪽(검색 결과) + 오른쪽(사이드바)

▶ 검색 결과 영역
- SearchFilters: 총 결과 수, 필터, 검색 시간 표시
- 로딩 중: 스켈레톤 UI 렌더링 (5개 반복)
- 에러 발생: Database 아이콘 + 에러 메시지
- 검색 결과 존재: SearchResultItem 반복 출력
- 페이지네이션 버튼: 이전 / 1 / 2 / 3 / 다음
- 검색 결과 없음: 안내 메시지 + 추천 검색어 버튼

▶ 사이드바 영역 (lg 이상만 보임)
- knowledgePanel 있으면 KnowledgePanel 컴포넌트 표시
- Sidebar 컴포넌트: 인기 검색어 등 렌더링
- Suspense + lazy loading으로 퍼포먼스 최적화

📌 모달
- 사용자가 항목 클릭 시: SearchResultModal 표시 (selectedResult 기반)

✅ 4. 최적화 및 기타
- 코드 스플리팅: KnowledgePanel, Sidebar, SearchResultModal → lazy + Suspense
- 스타일링: Tailwind CSS
- UI 컴포넌트 중심 구성으로 가독성과 유지 보수 용이

[💡 사용 주요 컴포넌트]
- GoogleStyleSearch: 검색창 UI
- SearchFilters: 필터 및 검색 결과 수
- SearchResultItem: 검색 결과 항목 렌더링
- KnowledgePanel: 지식 패널 (관련 정보 요약)
- SearchResultModal: 클릭한 항목 상세 보기
- Sidebar: 트렌드 또는 추천 검색어 등 표시

[📦 핵심 Hook]
- useSearch: 검색 결과, 로딩/에러, 필터 처리

